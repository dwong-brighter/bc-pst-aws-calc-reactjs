{"version":3,"sources":["logo.svg","components/ExchangeRateInput/ExchangeRateInput.js","components/CostInput/CostInput.js","components/InputsFromBill/InputsFromBill.js","components/NavigationBar/NavigationBar.js","helpers/CalcEngine.js","components/ResultsArea/ResultsArea.js","components/TechStackInfo/TechStackInfo.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","exchangeRateField","margin","maxWidth","NumberFormatExchangeRate","props","foreignCurrencyCode","inputRef","onChange","other","getInputRef","onValueChange","values","target","value","thousandSeparator","decimalScale","fixedDecimalScale","suffix","ExchangeRateInput","name","description","initialRate","onRateChange","classes","useState","rate","setRate","TextField","className","label","event","newRate","parseFloat","id","InputProps","inputComponent","container","display","flexWrap","width","currencyAmountField","minWidth","NumberFormatCurrency","currencyCode","prefix","CostInput","initialMainAmount","initialCadRounding","onMainAmountChange","onCadRoundingChange","mainAmount","setMainAmount","cadRounding","setCadRounding","cadRoundingName","Box","newAmount","newRounding","backgroundColor","borderColor","borderRadius","borderWidth","padding","InputsFromBill","initialValues","changeHandlers","exchangeRate","onExchangeRateChange","usdTotalAmount","cadTotalRounding","onUsdTotalAmountChange","onCadTotalRoundingChange","usdGstAmount","cadGstRounding","onUsdGstAmountChange","onCadGstRoundingChange","NavigationBar","AppBar","position","Toolbar","variant","IconButton","color","edge","aria-label","Typography","CalcEngine","usdAmount","usdTotal","usdGst","this","calculateUsdNetCost","calculateUsdNetCostSubjectToGstAndPst","textAlign","ResultsArea","usdNetAmount","usdNetAmountGstAndPstTaxable","usdNetAmountOnlyPstTaxable","calculateUsdNetCostSubjectToPstOnly","usdPstAmount","calculateUsdPst","toFixed","convertUsdToCad","from","transform","to","logo","animation","marginLeft","marginTop","details","TechStackInfo","Accordion","defaultExpanded","AccordionSummary","expandIcon","AccordionDetails","Avatar","src","alt","List","ListItem","dense","ListItemText","primary","App","setExchangeRate","setUsdTotalAmount","setUsdGstAmount","setCadTotalRounding","inputChangeHandlers","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b93bf34d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport NumberFormat from 'react-number-format';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles({\n  exchangeRateField: {\n    margin: '0.5rem',\n    maxWidth: '50%',\n  }\n});\n\n/**\n * Formatter for a text field to become an exchange rate field.\n * \n * @param {*} props \n */\nfunction NumberFormatExchangeRate (props) {\n  const { foreignCurrencyCode, inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={values => {\n        onChange({\n          target: {\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      decimalScale={13}\n      fixedDecimalScale\n      suffix={' CAD to 1 ' + foreignCurrencyCode}\n    />\n  );\n}\n\nNumberFormatExchangeRate.propTypes = {\n  foreignCurrencyCode: PropTypes.string.isRequired,\n  inputRef: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nfunction ExchangeRateInput(props) {\n  const { \n    name,\n    description,\n    foreignCurrencyCode,\n    initialRate,\n    onRateChange\n  } = props;\n\n  const classes = useStyles();\n\n  const [rate, setRate] = useState(initialRate);\n\n  return (\n    <TextField\n      className={classes.exchangeRateField}\n      label={description}\n      value={rate}\n      onChange={(event) => {\n        let newRate = parseFloat(event.target.value);\n        setRate(newRate); // update our state\n        onRateChange(newRate); // update the app's state\n      }}\n      id={name}\n      InputProps={{\n        inputComponent: (props) =>\n          <NumberFormatExchangeRate foreignCurrencyCode={foreignCurrencyCode} {...props} />,\n      }}\n    />\n  );\n}\n\nExchangeRateInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  foreignCurrencyCode: PropTypes.string.isRequired,\n  initialRate: PropTypes.number.isRequired,\n  onRateChange: PropTypes.func.isRequired,\n};\n\nexport default ExchangeRateInput;","import React, { useState } from 'react';\nimport NumberFormat from 'react-number-format';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%',\n  },\n  currencyAmountField: {\n    margin: '0.5rem',\n    minWidth: '20rem',\n  }\n});\n\n/**\n * Formatter for a text field to become a currency field.\n * \n * @param {*} props \n */\nfunction NumberFormatCurrency (props) {\n  const { currencyCode, inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={values => {\n        onChange({\n          target: {\n            value: values.value,\n          },\n        });\n      }}\n      prefix=\"$\"\n      thousandSeparator\n      decimalScale={2}\n      fixedDecimalScale\n      suffix={' ' + currencyCode}\n    />\n  );\n}\n\nNumberFormatCurrency.propTypes = {\n  currencyCode: PropTypes.string.isRequired,\n  inputRef: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nfunction CostInput(props) {\n  const {\n    name,\n    description,\n    currencyCode,\n    initialMainAmount,\n    initialCadRounding,\n    onMainAmountChange,\n    onCadRoundingChange,\n  } = props;\n\n  const classes = useStyles();\n\n  const [mainAmount, setMainAmount] = useState(initialMainAmount);\n  const [cadRounding, setCadRounding] = useState(initialCadRounding);\n\n  let cadRoundingName = name + 'CadRounding';\n  return (\n    <Box className={classes.container}>\n      <TextField\n        className={classes.currencyAmountField}\n        label={description}\n        value={mainAmount}\n        onChange={(event) => {\n          let newAmount = parseFloat(event.target.value);\n          setMainAmount(newAmount); // update our state\n          onMainAmountChange(newAmount); // update the app's state\n        }}\n        id={name}\n        InputProps={{\n          inputComponent: (props) =>\n            <NumberFormatCurrency currencyCode={currencyCode} {...props} />,\n        }}\n      />\n      <TextField\n        className={classes.currencyAmountField}\n        label=\"Rounding\"\n        value={cadRounding}\n        onChange={(event) => {\n          let newRounding = parseFloat(event.target.value);\n          setCadRounding(newRounding); // update our state\n          onCadRoundingChange(newRounding); // update the app's state\n        }}\n        id={cadRoundingName}\n        InputProps={{\n          inputComponent: (props) =>\n            <NumberFormatCurrency currencyCode=\"CAD\" {...props} />,\n        }}\n      />\n    </Box>\n  );\n}\n\nCostInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  currencyCode: PropTypes.string.isRequired,\n  initialMainAmount: PropTypes.number.isRequired,\n  initialCadRounding: PropTypes.number.isRequired,\n  onMainAmountChange: PropTypes.func.isRequired,\n  onCadRoundingChange: PropTypes.func.isRequired\n};\n\nexport default CostInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport ExchangeRateInput from '../ExchangeRateInput';\nimport CostInput from '../CostInput';\n\nconst useStyles = makeStyles({\n  container: {\n    backgroundColor: 'palegreen',\n    borderColor: 'black',\n    borderRadius: '0.5rem',\n    borderWidth: '0.5rem',\n    display: 'grid',\n    margin: '1rem',\n    padding: '1rem',\n  }\n});\n\nfunction InputsFromBill (props) {\n  const {initialValues, changeHandlers} = props;\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.container}>\n      <ExchangeRateInput\n        name=\"exchangeRate\"\n        description=\"Exchange rate (per AWS bill)\"\n        foreignCurrencyCode=\"USD\"\n        initialRate={initialValues.exchangeRate}\n        onRateChange={changeHandlers.onExchangeRateChange}\n      />\n      <CostInput \n        name=\"usdTotal\"\n        description=\"Total cost (per AWS bill)\"\n        currencyCode=\"USD\"\n        initialMainAmount={initialValues.usdTotalAmount}\n        initialCadRounding={initialValues.cadTotalRounding}\n        onMainAmountChange={changeHandlers.onUsdTotalAmountChange}\n        onCadRoundingChange={changeHandlers.onCadTotalRoundingChange}\n      />\n      <CostInput\n        name=\"usdGst\"\n        description=\"GST amount (per AWS tax bill)\"\n        currencyCode=\"USD\"\n        initialMainAmount={initialValues.usdGstAmount}\n        initialCadRounding={initialValues.cadGstRounding}\n        onMainAmountChange={changeHandlers.onUsdGstAmountChange}\n        onCadRoundingChange={changeHandlers.onCadGstRoundingChange}\n      />\n    </Box>\n  );\n}\n\nInputsFromBill.propTypes = {\n  initialValues: PropTypes.object.isRequired,\n  changeHandlers: PropTypes.object.isRequired\n};\n\nexport default InputsFromBill;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuButton from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nfunction NavigationBar () {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar variant=\"dense\">\n        <IconButton color=\"inherit\" edge=\"start\" aria-label=\"Menu\">\n          <MenuButton />\n        </IconButton>\n        <Typography variant=\"h6\" color=\"inherit\">BC PST Calculator for AWS Billing (Using ReactJS and Material-UI)</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nNavigationBar.propTypes = {};\n\nexport default NavigationBar;\n","/** \n * Engine for calculating values (e.g. PST given price, CAD value given US value\n * and exchange rate).\n * \n * Copyright (c) 2018-present, Danita Wong\n * \n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/** TODO: More robust error handling! */\n/**\n * Engine for calculating values (e.g. PST given price, CAD value given US value\n * and exchange rate).\n */\nconst gstRate = 0.05;\nconst pstRate = 0.07;\n\nclass CalcEngine {\n  // inputs: Total USD, exchange rate, GST USD\n\n  /**\n   * Converts USD amounts to CAD amounts given an exchange rate\n   * (e.g. if the USD exchange rate is 1.2 then a USD amount of 2 becomes a CAD\n   * amount of 2.4.).  Note that this does not round to 2 decimal places.\n   * \n   * @param {number} usdAmount \n   * @param {number} exchangeRate \n   */\n  static convertUsdToCad(usdAmount, exchangeRate) {\n    return usdAmount * exchangeRate;\n  }\n\n  /**\n   * Calculates the net USD amount given the total USD amount and GST, as\n   * reported on the regular invoice.  Note that there may be parts of the\n   * net cost that aren't subject to GST (but all of the net cost is\n   * subject to PST).\n   * \n   * @param {number} usdTotal \n   * @param {number} usdGst \n   */\n  static calculateUsdNetCost(usdTotal, usdGst) {\n    return usdTotal - usdGst;\n  }\n\n  /**\n   * Calculates the net USD amount that's subject to GST and PST (this may not be\n   * the same as the USD total minus GST, as some amounts are not subject to GST).\n   *\n   * @param {number} usdGst \n   */\n  static calculateUsdNetCostSubjectToGstAndPst(usdGst) {\n    return usdGst / gstRate;\n  }\n\n  /**\n   * Calculates the net USD amount that's subject to PST only (basically the\n   * USD total minus USD GST minus net amount that's subject to GST and PST).\n   * @param {number} usdTotal \n   * @param {number} usdGst \n   */\n  static calculateUsdNetCostSubjectToPstOnly(usdTotal, usdGst) {\n    return (this.calculateUsdNetCost(usdTotal, usdGst)\n            - this.calculateUsdNetCostSubjectToGstAndPst(usdGst));\n  }\n\n  /**\n   * Calculates the PST in USD based on the USD total and USD GST.\n   * Basically, the PST is calculated on the net cost (total minus GST) and\n   * applies even to the portion of net cost that is not subject to GST.\n   * \n   * @param {number} usdTotal \n   * @param {number} usdGst \n   */\n  static calculateUsdPst(usdTotal, usdGst) {\n    return this.calculateUsdNetCost(usdTotal, usdGst) * pstRate;\n  }\n}\n\nexport default CalcEngine;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport CalcEngine from '../../helpers/CalcEngine';\n\nconst useStyles = makeStyles({\n  container: {\n    backgroundColor: 'lightblue',\n    borderRadius: '0.5rem',\n    display: 'block',\n    margin: '1.5rem 1rem',\n    padding: '0.5rem 1rem',\n    textAlign: 'left',\n  }\n});\n\nfunction ResultsArea (props) {\n  const {\n    exchangeRate,\n    usdTotalAmount,\n    usdGstAmount,\n    cadTotalRounding,\n    cadGstRounding\n  } = props;\n\n  const classes = useStyles();\n\n  const usdNetAmount = CalcEngine.calculateUsdNetCost(usdTotalAmount, usdGstAmount);\n  const usdNetAmountGstAndPstTaxable = CalcEngine.calculateUsdNetCostSubjectToGstAndPst(usdGstAmount);\n  const usdNetAmountOnlyPstTaxable = CalcEngine.calculateUsdNetCostSubjectToPstOnly(usdTotalAmount, usdGstAmount);\n  const usdPstAmount = CalcEngine.calculateUsdPst(usdTotalAmount, usdGstAmount);\n\n  return (\n    <Box className={classes.container}>\n      <p>USD to CAD Exchange Rate is <strong>{exchangeRate.toFixed(14)}</strong></p>\n      <p>USD Total of <strong>${usdTotalAmount.toFixed(2)}</strong> is <strong>${CalcEngine.convertUsdToCad(usdTotalAmount, exchangeRate).toFixed(2)}</strong> CAD</p>\n      <p>USD Net Price Subject to GST and PST of <strong>${usdNetAmountGstAndPstTaxable.toFixed(2)}</strong> is <strong>${CalcEngine.convertUsdToCad(usdNetAmountGstAndPstTaxable, exchangeRate).toFixed(2)}</strong> CAD</p>\n      <p>USD Net Price Subject to PST only of <strong>${usdNetAmountOnlyPstTaxable.toFixed(2)}</strong> is <strong>${CalcEngine.convertUsdToCad(usdNetAmountOnlyPstTaxable, exchangeRate).toFixed(2)}</strong> CAD</p>\n      <p>USD Net Cost of (all subject to PST) <strong>${usdNetAmount.toFixed(2)}</strong> is <strong>${CalcEngine.convertUsdToCad(usdNetAmount, exchangeRate).toFixed(2)}</strong> CAD</p>\n      <p>USD GST of <strong>${usdGstAmount.toFixed(2)}</strong> is <strong>${CalcEngine.convertUsdToCad(usdGstAmount, exchangeRate).toFixed(2)}</strong> CAD</p>\n      <p>USD PST to Self-Assess of <strong>${usdPstAmount.toFixed(2)}</strong> is <strong>${CalcEngine.convertUsdToCad(usdPstAmount, exchangeRate).toFixed(2)}</strong> CAD</p>\n      <p><em>CAD Total Rounding is <strong>${cadTotalRounding.toFixed(2)}</strong> CAD</em></p>\n      <p><em>CAD GST Rounding is <strong>${cadGstRounding.toFixed(2)}</strong> CAD</em></p>\n    </Box>\n  );\n}\n\nResultsArea.propTypes = {\n  exchangeRate: PropTypes.number.isRequired,\n  usdTotalAmount: PropTypes.number.isRequired,\n  usdGstAmount: PropTypes.number.isRequired,\n  cadTotalRounding: PropTypes.number.isRequired,\n  cadGstRounding: PropTypes.number.isRequired\n};\n\nexport default ResultsArea;\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMoreRounded';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport logo from '../../logo.svg';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  '@keyframes logoSpin': {\n    from: { transform: 'rotate(0deg)' },\n    to: { transform: 'rotate(360deg)' },\n  },\n  logo: {\n    animation: '$logoSpin infinite 20s linear',\n    marginLeft: '0.5rem',\n    marginTop: '0.5rem',\n  },\n  details: {\n    width: '100%',\n    display: 'block',\n  },\n});\n\nfunction TechStackInfo() {\n  const classes = useStyles();\n\n  return (\n    <Accordion defaultExpanded>\n      <AccordionSummary expandIcon={<ExpandMoreIcon aria-label=\"Expand\" />}>\n        <Typography variant=\"subtitle1\" color=\"inherit\">Technology Stack</Typography>\n      </AccordionSummary >\n      <AccordionDetails className={classes.details}>\n        <Avatar className={classes.logo} src={logo} alt=\"logo\" />\n        <List>\n          <ListItem dense>\n            <ListItemText primary=\"ReactJS\" />\n          </ListItem>\n          <ListItem dense>\n            <ListItemText primary=\"Material-UI\" />\n          </ListItem>\n          <ListItem dense>\n            <ListItemText primary=\"Node.js (and NPM)\" />\n          </ListItem>\n        </List>\n      </AccordionDetails>\n    </Accordion>\n  );\n}\n\nTechStackInfo.propTypes = {};\n\nexport default TechStackInfo;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport InputsFromBill from './components/InputsFromBill';\nimport NavigationBar from './components/NavigationBar';\nimport ResultsArea from './components/ResultsArea';\nimport TechStackInfo from './components/TechStackInfo';\n\nconst useStyles = makeStyles({\n  container: {\n    textAlign: 'center',\n  }\n});\n\nfunction App () {\n  const classes = useStyles();\n\n  // Initial values - these are props passed to initialize the InputsFromBill\n  // component as well as to initialize our state\n  const initialValues = {\n    exchangeRate: 1,\n    usdTotalAmount: 0,\n    usdGstAmount: 0,\n    cadTotalRounding: 0,\n    cadGstRounding: 0\n  };\n\n  // State - these are tied to props for the ResultsArea component. The\n  // InputsFromBill component calls our change handler to let us know when\n  // the input values have changed, in which case we update our state and the\n  // ResultsArea gets recalculated.\n  const [exchangeRate, setExchangeRate] = useState(initialValues.exchangeRate);\n  const [usdTotalAmount, setUsdTotalAmount] = useState(initialValues.usdTotalAmount);\n  const [usdGstAmount, setUsdGstAmount] = useState(initialValues.usdGstAmount);\n  const [cadTotalRounding, setCadTotalRounding] = useState(initialValues.cadTotalRounding);\n  const [cadGstRounding, setCadGstRounding] = useState(initialValues.cadGstRounding);\n\n  // Input change handlers - pass the state setters down to the child components\n  // so when the child components update their values, we get told about these\n  // changes.\n  const inputChangeHandlers = {\n    onExchangeRateChange: setExchangeRate,\n    onUsdTotalAmountChange: setUsdTotalAmount,\n    onUsdGstAmountChange: setUsdGstAmount,\n    onCadTotalRoundingChange: setCadTotalRounding,\n    onCadGstRoundingChange: setCadGstRounding,\n  };\n\n  return (\n    <Box className={classes.container}>\n      <NavigationBar />\n      <TechStackInfo />\n      <InputsFromBill\n        initialValues={initialValues}\n        changeHandlers={inputChangeHandlers}\n      />\n      <ResultsArea\n        exchangeRate={exchangeRate}\n        usdTotalAmount={usdTotalAmount}\n        usdGstAmount={usdGstAmount}\n        cadTotalRounding={cadTotalRounding}\n        cadGstRounding={cadGstRounding}\n      />\n    </Box>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}